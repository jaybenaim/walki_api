swagger: '2.0'
info:
  description: |
    Walki API
    [http://swagger.io](http://swagger.io) or on
    [irc.freenode.net, #swagger](http://swagger.io/irc/).
  version: 1.0.0
  title: Walki
  termsOfService: http://swagger.io/terms/
  contact:
    email: benaimjacob@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
# host: petstore.swagger.io
# basePath: /v2
tags:
- name: pet
  description: Everything about your Pet's
  externalDocs:
    description: Find out more
    url: http://swagger.io
- name: user
  description: Operations about user
  externalDocs:
    description: Find out more about our store
    url: http://swagger.io
- name: events
  description: Operations about events
  externalDocs:
    description: Find out more about our store
    url: http://swagger.io
# schemes:
# - http
paths:
  /pets:
    post:
      tags:
      - pet
      summary: Add a new pet
      operationId: addPet
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Pet object that needs to be added
        required: true
        schema:
          $ref: '#/definitions/Pet'
      responses:
        405:
          description: Invalid input
      security:
      - firebase_auth:
        - write:pets
        - read:pets
    put:
      tags:
      - pet
      summary: Update an existing pet
      operationId: updatePet
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Pet object that needs to be added
        schema:
          $ref: '#/definitions/Pet'
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
        405:
          description: Validation exception
      security:
      - firebase_auth:
        - write:pets
        - read:pets
  /pet/findByStatus:
    get:
      tags:
      - pet
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      produces:
      - application/json
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: true
        type: array
        items:
          type: string
          enum:
          - available
          - unavailable
          default: available
        collectionFormat: multi
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Pet'
        400:
          description: Invalid status value
      security:
      - firebase_auth:
        - write:pets
        - read:pets
  /pet/findByTags:
    get:
      tags:
      - pet
      summary: Finds Pets by tags
      description: Muliple tags can be provided with comma separated strings. Use\
        \ tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      produces:
      - application/json
      parameters:
      - name: tags
        in: query
        description: Tags to filter by
        required: true
        type: array
        items:
          type: string
        collectionFormat: multi
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Pet'
        400:
          description: Invalid tag value
      security:
      - firebase_auth:
        - write:pets
        - read:pets
      deprecated: true
  /pet/{petId}:
    get:
      tags:
      - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      produces:
      - application/json
      - application/xml
      parameters:
      - name: petId
        in: path
        description: ID of pet to return
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Pet'
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
      security:
      - api_key: []
    post:
      tags:
      - pet
      summary: Updates a pet in the store with form data
      operationId: updatePetWithForm
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/json
      - application/xml
      parameters:
      - name: petId
        in: path
        description: ID of pet that needs to be updated
        required: true
        type: integer
        format: int64
      - name: name
        in: formData
        description: Updated name of the pet
        required: false
        type: string
      - name: status
        in: formData
        description: Updated status of the pet
        required: false
        type: string
      responses:
        405:
          description: Invalid input
      security:
      - firebase_auth:
        - write:pets
        - read:pets
    delete:
      tags:
      - pet
      summary: Deletes a pet
      operationId: deletePet
      produces:
      - application/json
      - application/xml
      parameters:
      - name: api_key
        in: header
        required: false
        type: string
      - name: petId
        in: path
        description: Pet id to delete
        required: true
        type: integer
        format: int64
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
      security:
      - firebase_auth:
        - write:pets
        - read:pets
  /pet/{petId}/uploadImage:
    post:
      tags:
      - pet
      summary: uploads an image
      operationId: uploadFile
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: petId
        in: path
        description: ID of pet to update
        required: true
        type: integer
        format: int64
      - name: additionalMetadata
        in: formData
        description: Additional data to pass to server
        required: false
        type: string
      - name: file
        in: formData
        description: file to upload
        required: false
        type: file
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/ApiResponse'
      security:
      - firebase_auth:
        - write:pets
        - read:pets
  /users:
    get:
      tags:
      - users
      summary: Get users
      description: Multiple status values can be provided with comma separated strings
      operationId: getAllUsers
      produces:
      - application/json
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: true
        type: array
        items:
          type: string
          enum:
          - available
          - unavailable
          default: available
        collectionFormat: multi
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        400:
          description: Invalid status value
      security:
      - firebase_auth:
        - write:pets
        - read:pets
  /user/{userId}:
    get:
      tags:
      - user
      summary: Get user profile from firebase id
      operationId: getUserById
      produces:
      - application/json
      parameters:
      - name: userId
        in: path
        description: The firebase id that needs to be fetched. Use ylNiYRV4HNg7EOgbtE5upPbxI7B2 for testing.
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        400:
          description: Invalid username supplied
        404:
          description: User not found
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
      - application/json
      parameters:
      - name: userId
        in: path
        description: id that need to be updated
        required: true
        type: string
      - in: body
        name: body
        description: Updated user object
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        400:
          description: Invalid user id supplied
        404:
          description: User not found
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
      - application/json
      parameters:
      - name: userId
        in: path
        description: The id that needs to be deleted
        required: true
        type: string
      responses:
        400:
          description: Invalid user id supplied
        404:
          description: User not found
  /events:
    post:
      tags:
      - event
      summary: Create a new event
      operationId: addEvent
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Event object that needs to created
        required: true
        schema:
          $ref: '#/definitions/Event'
      responses:
        405:
          description: Invalid input
      security:
      - firebase_auth:
        - write:pets
        - read:pets
  /event/{eventId}:
    get:
      tags:
      - event
      summary: Find event by ID
      description: Returns a single event
      operationId: getEventById
      produces:
      - application/json
      parameters:
      - name: eventId
        in: path
        description: ID of event to return
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Pet'
        400:
          description: Invalid ID supplied
        404:
          description: Event not found
      security:
      - api_key: []
    put:
      tags:
      - event
      summary: Updates an event
      operationId: updateEventWithForm
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/json
      parameters:
      - name: eventId
        in: path
        description: ID of event that needs to be updated
        required: true
        type: integer
        format: int64
      - name: name
        in: formData
        description: Updated name of the event
        required: false
        type: string
      - name: status
        in: formData
        description: Updated status of the event
        required: false
        type: string
      responses:
        405:
          description: Invalid input
      security:
      - firebase_auth:
        - write:pets
        - read:pets
    delete:
      tags:
      - event
      summary: Deletes a event
      operationId: deleteEvent
      produces:
      - application/json
      parameters:
      - name: api_key
        in: header
        required: false
        type: string
      - name: eventId
        in: path
        description: Event id to delete
        required: true
        type: integer
        format: int64
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Event not found
      security:
      - firebase_auth:
        - write:pets
        - read:pets
securityDefinitions:
  firebase_auth:
    type: oauth2
    authorizationUrl: http://petstore.swagger.io/oauth/dialog
    flow: implicit
    scopes:
      write:pets: modify pets in your account
      read:pets: read your pets
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
        example: John123
      firstName:
        type: string
        example: John
      lastName:
        type: string
      email:
        type: string
        example: john123@gmail.com
      password:
        type: string
      phone:
        type: string
      avatarUrl:
        type: string
      userStatus:
        type: integer
        format: int32
        description: User Status
  Event:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
        example: Play time at the park
      time:
        type: string
      date:
        type: string
      description:
        type: string
      location:
        type: string
      attendees:
        type: array
        items:
          $ref: '#/definitions/Pet'
      lat:
        type: number
      lng:
        type: number
      user:
        $ref: '#/definitions/User'
      photoUrls:
        type: array
        items:
          type: string
  Tag:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
  Pet:
    type: object
    required:
    - user
    - name
    - breed
    - size
    - age
    - photoUrls
    properties:
      id:
        type: integer
        format: int64
      user:
        $ref: '#/definitions/User'
      name:
        type: string
        example: doggie
      breed:
        type: string
        example: Golden Doodle
      size:
        type: string
        enum:
          - small (2lbs-10lbs)
          - medium (10lb-25lbs)
          - large (25lb+)
        example: small (2lbs-10lbs)
      description:
        type: string
        example: A friendly guy
      gender:
        type: string
        enum:
          - male
          - female
        example: male
      age:
        type: integer
        format: int32
        example: 3
      photoUrls:
        type: array
        items:
          type: string
      tags:
        type: array
        items:
          $ref: '#/definitions/Tag'
      status:
        type: string
        description: pet status in the store
        enum:
        - available
        - unavailable
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /Walki/Walki/1.0.0
schemes:
 - https
 - http